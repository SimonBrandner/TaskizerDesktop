on:
  push:
    tags:
      - "v[0-9]+.*"
name: Build and release Taskizer
jobs:
  prepareRelease:
    name: Prepare release
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
    outputs:
      upload_url: ${{ steps.prepareRelease.outputs.upload_url }}
    steps:
      - name: Create release
        id: createRelease
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: true
          prerelease: false
      - name: Setup JFrog CLI 
        id: setupJFrogCLI
        uses: jfrog/setup-jfrog-cli@v1
      - name: Create version 
        id: createVersion
        run: jfrog bt vc simonbrandner/simon-s-debian-repo/taskizer/${{ github.ref }} --user simonbrandner --key ${{ secrets.BT_TOKEN }}
  buildAndReleaseAssetsOnWin:
    name: Build and release assets on Win
    needs: prepareRelease
    runs-on: windows-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
    steps:
      # Checkout
      - name: Checkout code
        uses: actions/checkout@v1
      # Cache Node modules
      - name: Cache node modules
        uses: actions/cache@v1
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      # Setup Node
      - name: Node ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      # Build
      - name: npm install and npm run build
        run: |
          npm install
          npm run buildWin
  buildAndReleaseAssetsOnLinux:
    name: Build and release assets on Linux
    needs: prepareRelease
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
      BT_TOKEN: ${{ secrets.BT_TOKEN }}
    steps:
      # Checkout
      - name: Checkout code
        uses: actions/checkout@v1
      # Cache Node modules
      - name: Cache node modules
        uses: actions/cache@v1
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      # Setup Node
      - name: Node ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      # Build
      - name: npm install and npm run build
        run: |
          npm install
          npm run buildLinux32
          npm run buildLinux64
  buildAndReleaseAssetsOnMac:
    name: Build and release assets on Mac
    needs: prepareRelease
    runs-on: macos-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
    steps:
      # Checkout
      - name: Checkout code
        uses: actions/checkout@v1
      # Cache Node modules
      - name: Cache node modules
        uses: actions/cache@v1
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      # Setup Node
      - name: Node ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      # Build on Mac
      - name: npm install and npm run build
        run: |
          npm install
          npm run buildMac32
          npm run buildMac64